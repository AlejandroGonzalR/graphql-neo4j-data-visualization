"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IsAuthenticatedDirective = exports.HasRoleDirective = exports.HasScopeDirective = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors = require("./errors");

var _jsonwebtoken = require("jsonwebtoken");

var jwt = _interopRequireWildcard(_jsonwebtoken);

var _graphqlTools = require("graphql-tools");

var _graphql = require("graphql");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var verifyAndDecodeToken = function verifyAndDecodeToken(_ref) {
  var context = _ref.context;

  if (!context || !context.headers || !context.headers.authorization && !context.headers.Authorization) {
    throw new _errors.AuthorizationError({ message: "No authorization token." });
  }

  var token = context.headers.authorization || context.headers.Authorization;
  try {
    var id_token = token.replace("Bearer ", "");
    var JWT_SECRET = process.env.JWT_SECRET;

    if (!JWT_SECRET) {
      throw new Error("No JWT secret set. Set environment variable JWT_SECRET to decode token.");
    }
    var decoded = jwt.verify(id_token, JWT_SECRET, {
      algorithms: ["HS256", "RS256"]
    });

    return decoded;
  } catch (err) {
    throw new _errors.AuthorizationError({
      message: "You are not authorized for this resource"
    });
  }
};

var HasScopeDirective = exports.HasScopeDirective = function (_SchemaDirectiveVisit) {
  _inherits(HasScopeDirective, _SchemaDirectiveVisit);

  function HasScopeDirective() {
    _classCallCheck(this, HasScopeDirective);

    return _possibleConstructorReturn(this, (HasScopeDirective.__proto__ || Object.getPrototypeOf(HasScopeDirective)).apply(this, arguments));
  }

  _createClass(HasScopeDirective, [{
    key: "visitFieldDefinition",


    // used for example, with Query and Mutation fields
    value: function visitFieldDefinition(field) {
      var expectedScopes = this.args.scopes;
      var next = field.resolve;

      // wrap resolver with auth check
      field.resolve = function (result, args, context, info) {
        var decoded = verifyAndDecodeToken({ context: context });

        // FIXME: override with env var
        var scopes = decoded["Scopes"] || decoded["scopes"] || decoded["Scope"] || decoded["scope"] || [];

        if (expectedScopes.some(function (scope) {
          return scopes.indexOf(scope) !== -1;
        })) {
          return next(result, args, context, info);
        }

        throw new _errors.AuthorizationError({
          message: "You are not authorized for this resource"
        });
      };
    }
  }, {
    key: "visitObject",
    value: function visitObject(obj) {
      var fields = obj.getFields();
      var expectedScopes = this.args.roles;

      Object.keys(fields).forEach(function (fieldName) {
        var field = fields[fieldName];
        var next = field.resolve;
        field.resolve = function (result, args, context, info) {
          var decoded = verifyAndDecodeToken({ context: context });

          // FIXME: override w/ env var
          var scopes = decoded["Scopes"] || decoded["scopes"] || decoded["Scope"] || decoded["scope"] || [];

          if (expectedScopes.some(function (role) {
            return scopes.indexOf(role) !== -1;
          })) {
            return next(result, args, context, info);
          }
          throw new _errors.AuthorizationError({
            message: "You are not authorized for this resource"
          });
        };
      });
    }
  }], [{
    key: "getDirectiveDeclaration",
    value: function getDirectiveDeclaration(directiveName, schema) {
      return new _graphql.GraphQLDirective({
        name: "hasScope",
        locations: [_graphql.DirectiveLocation.FIELD_DEFINITION, _graphql.DirectiveLocation.OBJECT],
        args: {
          scopes: {
            type: new _graphql.GraphQLList(_graphql.GraphQLString),
            defaultValue: "none:read"
          }
        }
      });
    }
  }]);

  return HasScopeDirective;
}(_graphqlTools.SchemaDirectiveVisitor);

var HasRoleDirective = exports.HasRoleDirective = function (_SchemaDirectiveVisit2) {
  _inherits(HasRoleDirective, _SchemaDirectiveVisit2);

  function HasRoleDirective() {
    _classCallCheck(this, HasRoleDirective);

    return _possibleConstructorReturn(this, (HasRoleDirective.__proto__ || Object.getPrototypeOf(HasRoleDirective)).apply(this, arguments));
  }

  _createClass(HasRoleDirective, [{
    key: "visitFieldDefinition",
    value: function visitFieldDefinition(field) {
      var expectedRoles = this.args.roles;
      var next = field.resolve;

      field.resolve = function (result, args, context, info) {
        var decoded = verifyAndDecodeToken({ context: context });

        // FIXME: override with env var
        var roles = process.env.AUTH_DIRECTIVES_ROLE_KEY ? decoded[process.env.AUTH_DIRECTIVES_ROLE_KEY] || [] : decoded["Roles"] || decoded["roles"] || decoded["Role"] || decoded["role"] || [];

        if (expectedRoles.some(function (role) {
          return roles.indexOf(role) !== -1;
        })) {
          return next(result, args, context, info);
        }

        throw new _errors.AuthorizationError({
          message: "You are not authorized for this resource"
        });
      };
    }
  }, {
    key: "visitObject",
    value: function visitObject(obj) {
      var fields = obj.getFields();
      var expectedRoles = this.args.roles;

      Object.keys(fields).forEach(function (fieldName) {
        var field = fields[fieldName];
        var next = field.resolve;
        field.resolve = function (result, args, context, info) {
          var decoded = verifyAndDecodeToken({ context: context });

          var roles = process.env.AUTH_DIRECTIVES_ROLE_KEY ? decoded[process.env.AUTH_DIRECTIVES_ROLE_KEY] || [] : decoded["Roles"] || decoded["roles"] || decoded["Role"] || decoded["role"] || [];

          if (expectedRoles.some(function (role) {
            return roles.indexOf(role) !== -1;
          })) {
            return next(result, args, context, info);
          }
          throw new _errors.AuthorizationError({
            message: "You are not authorized for this resource"
          });
        };
      });
    }
  }], [{
    key: "getDirectiveDeclaration",
    value: function getDirectiveDeclaration(directiveName, schema) {
      return new _graphql.GraphQLDirective({
        name: "hasRole",
        locations: [_graphql.DirectiveLocation.FIELD_DEFINITION, _graphql.DirectiveLocation.OBJECT],
        args: {
          roles: {
            type: new _graphql.GraphQLList(schema.getType("Role")),
            defaultValue: "reader"
          }
        }
      });
    }
  }]);

  return HasRoleDirective;
}(_graphqlTools.SchemaDirectiveVisitor);

var IsAuthenticatedDirective = exports.IsAuthenticatedDirective = function (_SchemaDirectiveVisit3) {
  _inherits(IsAuthenticatedDirective, _SchemaDirectiveVisit3);

  function IsAuthenticatedDirective() {
    _classCallCheck(this, IsAuthenticatedDirective);

    return _possibleConstructorReturn(this, (IsAuthenticatedDirective.__proto__ || Object.getPrototypeOf(IsAuthenticatedDirective)).apply(this, arguments));
  }

  _createClass(IsAuthenticatedDirective, [{
    key: "visitObject",
    value: function visitObject(obj) {
      var fields = obj.getFields();

      Object.keys(fields).forEach(function (fieldName) {
        var field = fields[fieldName];
        var next = field.resolve;

        field.resolve = function (result, args, context, info) {
          verifyAndDecodeToken({ context: context }); // will throw error if not valid signed jwt
          return next(result, args, context, info);
        };
      });
    }
  }, {
    key: "visitFieldDefinition",
    value: function visitFieldDefinition(field) {
      var next = field.resolve;

      field.resolve = function (result, args, context, info) {
        verifyAndDecodeToken({ context: context });
        return next(result, args, context, info);
      };
    }
  }], [{
    key: "getDirectiveDeclaration",
    value: function getDirectiveDeclaration(directiveName, schema) {
      return new _graphql.GraphQLDirective({
        name: "isAuthenticated",
        locations: [_graphql.DirectiveLocation.FIELD_DEFINITION, _graphql.DirectiveLocation.OBJECT]
      });
    }
  }]);

  return IsAuthenticatedDirective;
}(_graphqlTools.SchemaDirectiveVisitor);