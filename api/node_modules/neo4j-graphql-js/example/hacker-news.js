var { makeAugmentedSchema } = require("../src/index");
var { v1 } = require("neo4j-driver");
var { ApolloServer } = require("apollo-server");

const typeDefs = /* GraphQL */ `


type User {
    id: ID!
    delay: Int
    created: DateTime
    karma: Int
    about: String
    submitted: [Story] @relation(name: "SUBMITTED", direction: "OUT")
    comments: [Comment] @relation(name: "POSTED", direction: "OUT")
}

type Story {
    id: ID!
    descendants: Int @cypher(statement: "")
    score: Int
    time: DateTime
    title: String
    url: String
    comments: [Comment] @relation(name: "IN_REPLY_TO", direction: "IN")
    by: User @relation(name: "SUBMITTED", direction: "IN")
}

type Comment {
    id: ID!
    by: User
    replies: [Comment] @relation(name: "IN_REPLY_TO", direction: "IN")
    time: DateTime
    text: String
    inReplyTo: [Comment] @relation(name: "IN_REPLY_TO", direction: "OUT")
}

input StoryInput {
    by: String
    id: ID!
    kids: [ID!]
    timeinput: String
    title: String
    url: String 
}

type Mutation {
    MergeStory(data: StoryInput): Story @cypher(statement: """ 
        MERGE (s:Story {id: $data.id})
        SET s.time = DateTime( $data.timeinput),
            s.score = $data.score,
            s.title = $data.title,
            s.url   = $data.url
        MERGE (u:User {id: $data.by})
        MERGE (u)-[:SUBMITTED]->(s)
        RETURN s       
    """
    )

    MergeStoryFlat(by: String, id: ID!, score: Int, kids: [ID!], timeinput: String, title: String, url: String): Story @cypher(statement: """
    MERGE (s:Story {id: $id})
        SET s.time = DateTime($timeinput),
            s.title = $title,
            s.url   = $url,
            s.score = $score
        MERGE (u:User {id: $by})
        MERGE (u)-[:SUBMITTED]->(s)
        RETURN s     
    """
    )

    MergeCommentFlat(by: String, id: ID!, parent: ID!, text: String, timeinput: String): Comment @cypher(statement: """
    MERGE (c:Comment {id: $id})
        SET c.text = $text,
            c.time = DateTime($timeinput)
    MERGE (u:User {id: $by})
    MERGE (u)-[:POSTED]->(c)
    WITH *
    MATCH (n) WHERE n.id = $parent
    MERGE (n)<-[:IN_REPLY_TO]-(c)
    RETURN c
    """
    )
    
    
}
`;


// { by: 'svl',
//   descendants: 14,
//   id: 19121716,
//   kids:
//    [ 19121918, 19122008, 19122174, 19122123, 19121887, 19122237 ],
//   score: 52,
//   time: 1549709171,
//   title:
//    'Kenya Government mandates DNA-linked national ID, without data protection law',
//   type: 'story',
//   url:
//    'https://blog.mozilla.org/netpolicy/2019/02/08/kenya-government-mandates-dna-linked-national-id-without-data-protection-law/' }

const schema = makeAugmentedSchema({
    typeDefs
});

const driver = v1.driver(
    'bolt://localhost:7687',
    v1.auth.basic('neo4j', 'letmein')
);

const server = new ApolloServer({
    schema,
    context: {
        driver
    }
});

server.listen(3003, '0.0.0.0').then(({url}) => {
    console.log(`GraphQL API ready at ${url}`);
});