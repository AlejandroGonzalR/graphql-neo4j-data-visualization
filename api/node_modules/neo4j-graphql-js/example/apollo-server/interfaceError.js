
import { ApolloServer, makeExecutableSchema } from "apollo-server";
import { makeAugmentedSchema, neo4jgraphql } from "../../src/index";
import gql from "graphql-tag";
import { v1 as neo4j } from "neo4j-driver";

const driver = neo4j.driver(
  "bolt://localhost:7687",
  neo4j.auth.basic("neo4j", "letmein")
);

const typeDefs = `
  type Song {
    id: ID!
    name: String!
    fileName: String!
  }

  type User {
    id: ID!
    name: String!
  }

  interface Playlist {
    id: ID!
    name: String!
    songs: [Song!]! @relation(name: "HAS_SONG", direction: "OUT")
  }

  type UserPlaylist implements Playlist {
    id: ID!
    name: String!
    imageName: String
    songs: [Song!]! @relation(name: "HAS_SONG", direction: "OUT")
    owner: User! @relation(name: "CREATED_BY", direction: "OUT")
  }

  type PublicPlaylist implements Playlist {
    id: ID!
    name: String!
    songs: [Song!]! @relation(name: "HAS_SONG", direction: "OUT")
    imageName: String!
  }

  union PlaylistUnion = PublicPlaylist | UserPlaylist

  type Query {
    PlaylistInterface: [Playlist!]!
      @cypher(
        statement: """
        MATCH (playlist:Playlist)
        
        RETURN playlist
        """
      )

    Playlist: [Playlist]

    PlaylistUnion: [PlaylistUnion!]!
      @cypher(
        statement: """
        MATCH (playlist)
        WHERE playlist:PublicPlaylist OR playlist:UserPlaylist
        RETURN playlist
        """
      )
  }

  directive @relation(
    name: String
    direction: String
  ) on FIELD_DEFINITION | OBJECT
  directive @cypher(statement: String) on FIELD_DEFINITION
`;

const resolvers = {
  Query: {
   PlaylistInterface: neo4jgraphql
  },
  Playlist: {
    __resolveType: (collection) => {
        console.log("YO DAWG");
        console.log(collection);
      return collection.imageName ? "PublicPlaylist" : "UserPlaylist"
    }
  },
  PlaylistUnion: {
    __resolveType: (collection) =>
      collection.imageName ? "PublicPlaylist" : "UserPlaylist"
  }
};

const schema = makeAugmentedSchema({
  resolvers,
  typeDefs
});


const server = new ApolloServer({
  schema,
  resolvers,
  context: { driver }
});

server
  .listen({port: 4001})
  .then(info => console.log(`GraphQL API ready at localhost:${info.port}`));