const {printSchema} = require('graphql');
const {ApolloServer} = require('apollo-server');
const {v1} = require('neo4j-driver')
const util = require('util');


const logger = require('@financial-times/n-logger').default;
const {
	makeExecutableSchema,
	addMockFunctionsToSchema,
} = require('graphql-tools');

const partialRight = require('lodash/partialRight');
const { neo4jgraphql, makeAugmentedSchema } = require('../../src/index');
const {
	getTypes,
	getEnums,
	getGraphqlDefs,
} = require('@financial-times/biz-ops-schema');

const mapToNeo4j = partialRight(neo4jgraphql, true);

const enumResolvers = getEnums();

const queryResolvers = getTypes().reduce(
	(query, type) =>
		Object.assign(query, {
			[type.name]: mapToNeo4j,
			[type.pluralName]: mapToNeo4j,
		}),
	{},
);

const resolvers = {
	enumResolvers,
	queryResolvers,
	all: Object.assign({}, enumResolvers, { Query: queryResolvers }),
};
console.log(resolvers.enumResolvers);
//console.log(getGraphqlDefs());

const schema = makeAugmentedSchema({
	typeDefs: ['directive @deprecated(reason: String) on ARGUMENT_DEFINITION | FIELD_DEFINITION | OBJECT',... getGraphqlDefs()].join('\n'),
	resolvers: resolvers.enumResolvers,
	 logger: {
	 	log(message) {
	 		logger.error(`GraphQL Schema: ${message}`, {
	 			event: 'GRAPHQL_SCHEMA_ERROR',
	 		});
		},
	 },
	config: {query: true, mutation: false}
});


//console.log(printSchema(schema));
//console.dir(resolvers.all);

//console.log(JSON.stringify(schema, null, 4));

//console.log(util.inspect(schema.getType('Group'), {showHidden: false, depth: null}))



const driver = v1.driver(
    "bolt://localhost:7687",
    v1.auth.basic("neo4j", "letmein")
);

const server = new ApolloServer({
    context: {driver},
    schema
});

server.listen("3000", "0.0.0.0").then(({url}) => {
    console.log("GraphQL API ready");
});